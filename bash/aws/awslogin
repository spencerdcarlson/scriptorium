#!/usr/bin/env bash

set -euo pipefail

PROFILE=${AWS_DEFAULT_PROFILE:-Development}
DEBUG=${DEBUG:-false}

function usage() {
  echo "Usage: $(basename "$0") [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -h, --help       Show this help message and exit"
  echo "  --profile NAME   Specify the AWS profile to use (default: ${PROFILE})"
  exit 0
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    --profile)
      PROFILE="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      ;;
  esac
done


is_debug_enabled() {
  [[ -n "$DEBUG" && "$DEBUG" != "0" && "$DEBUG" != "false" ]]
}

function log () {
  local message="${1}"
  local is_error="${2:-false}"
  local is_debug="${3:-false}"
  if [[ "${is_error}" == true ]]; then
    echo "$(date +"%Y-%m-%d %H:%M:%S") - ERROR: ${message}" >&2
  elif [[ "${is_debug}" == true ]] && is_debug_enabled; then
    # Debug logs go to stderr to not interfere with parsing output
    echo "$(date +"%Y-%m-%d %H:%M:%S") - DEBUG: ${message}" >&2
  elif [[ "${is_error}" != true && "${is_debug}" != true ]]; then
    echo "$(date +"%Y-%m-%d %H:%M:%S") - INFO:  ${message}" >&2
  fi
}

function debug () {
  local message="${1}"
  log "${message}" false true
}

function with_error () {
  local message="${1}"
  log "${message}" true
  exit 1
}

function get_profile () {
 local sso_account_id="${1}"
 local config_file=${2:-${HOME}/.aws/config}
 debug "Get local AWS profile name for the ${sso_account_id} account."

 local profile=$(awk -v account_id="${sso_account_id}" '
  /^\[profile / {
    profile_name = substr($0, 9, length($0) - 8)
  }
  /sso_account_id =/ {
    if ($3 == account_id) {
      print profile_name
      exit
    }
  }
' "${config_file}" | tr -d ']' | tr -d ' ')
  debug "Found '${profile}' local AWS profile for the ${sso_account_id}"
  
  echo "${profile}"
}

function can_access_aws_profile () {
  local account=-1
  local profile=${1:-${PROFILE}}
  account=$(aws sts get-caller-identity --query "Account" --profile "${profile}" --output text 2>/dev/null)

  if [ $? -eq 0 ] && [[ -n "$account" && "$account" =~ ^[0-9]+$ ]]; then
    debug "The current SSO session has access. Using ${profile} profile. Account=${account}"
    echo "${account}"
  fi

  return 0
}

function is_logged_in () {
  local check_profile=${1:-${PROFILE}}
  local account_id=$(can_access_aws_profile)
  local local_profile=$(get_profile "${account_id}")

  if [[ "${check_profile}" == "${local_profile}" ]]; then
    debug "Currently logged into ${check_profile}"
    echo "${check_profile}"
  else
    debug "Not logged into ${check_profile}."
  fi
}

TEMP_FILE=""

function aws_login () {
  local profile=${1:-$PROFILE}
  TEMP_FILE=$(mktemp)
  trap 'rm -f "${TEMP_FILE}"' EXIT
  debug "Starting AWS sso authorization flow."
  aws sso login --profile "${profile}" > "${TEMP_FILE}" 2>&1 &

  local timeout=120 # 2 min
  local elapsed=0

  until grep -q "Successfully" "${TEMP_FILE}" || [ $elapsed -ge $timeout ]; do
    sleep 0.5
    ((elapsed+=1))
  done

  if [ $elapsed -ge $timeout ]; then
    echo "Timeout reached while waiting for AWS SSO login confirmation."
    return 1
  fi
}

if ! command -v aws >/dev/null 2>&1; then with_error "'aws' is required."; fi


profile=$(is_logged_in)

if [ -z "${profile}" ]; then
  aws_login
else
  log "Currently logged into ${profile}"
fi

